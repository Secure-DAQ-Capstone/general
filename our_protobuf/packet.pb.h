// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packet_2eproto;
namespace tutorial {
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class Packet_Data;
class Packet_DataDefaultTypeInternal;
extern Packet_DataDefaultTypeInternal _Packet_Data_default_instance_;
class Packet_DataField;
class Packet_DataFieldDefaultTypeInternal;
extern Packet_DataFieldDefaultTypeInternal _Packet_DataField_default_instance_;
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> ::tutorial::Packet* Arena::CreateMaybeMessage<::tutorial::Packet>(Arena*);
template<> ::tutorial::Packet_Data* Arena::CreateMaybeMessage<::tutorial::Packet_Data>(Arena*);
template<> ::tutorial::Packet_DataField* Arena::CreateMaybeMessage<::tutorial::Packet_DataField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tutorial {

enum Packet_OriginalProtocol : int {
  Packet_OriginalProtocol_CAN = 0,
  Packet_OriginalProtocol_Modbus = 1,
  Packet_OriginalProtocol_Packet_OriginalProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Packet_OriginalProtocol_Packet_OriginalProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Packet_OriginalProtocol_IsValid(int value);
constexpr Packet_OriginalProtocol Packet_OriginalProtocol_OriginalProtocol_MIN = Packet_OriginalProtocol_CAN;
constexpr Packet_OriginalProtocol Packet_OriginalProtocol_OriginalProtocol_MAX = Packet_OriginalProtocol_Modbus;
constexpr int Packet_OriginalProtocol_OriginalProtocol_ARRAYSIZE = Packet_OriginalProtocol_OriginalProtocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Packet_OriginalProtocol_descriptor();
template<typename T>
inline const std::string& Packet_OriginalProtocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Packet_OriginalProtocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Packet_OriginalProtocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Packet_OriginalProtocol_descriptor(), enum_t_value);
}
inline bool Packet_OriginalProtocol_Parse(
    const std::string& name, Packet_OriginalProtocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Packet_OriginalProtocol>(
    Packet_OriginalProtocol_descriptor(), name, value);
}
// ===================================================================

class Packet_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Packet.Data) */ {
 public:
  inline Packet_Data() : Packet_Data(nullptr) {};
  virtual ~Packet_Data();

  Packet_Data(const Packet_Data& from);
  Packet_Data(Packet_Data&& from) noexcept
    : Packet_Data() {
    *this = ::std::move(from);
  }

  inline Packet_Data& operator=(const Packet_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet_Data& operator=(Packet_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet_Data* internal_default_instance() {
    return reinterpret_cast<const Packet_Data*>(
               &_Packet_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Packet_Data& a, Packet_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet_Data* New() const final {
    return CreateMaybeMessage<Packet_Data>(nullptr);
  }

  Packet_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet_Data& from);
  void MergeFrom(const Packet_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Packet.Data";
  }
  protected:
  explicit Packet_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .tutorial.Packet.DataField fields = 2;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::tutorial::Packet_DataField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Packet_DataField >*
      mutable_fields();
  private:
  const ::tutorial::Packet_DataField& _internal_fields(int index) const;
  ::tutorial::Packet_DataField* _internal_add_fields();
  public:
  const ::tutorial::Packet_DataField& fields(int index) const;
  ::tutorial::Packet_DataField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Packet_DataField >&
      fields() const;

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:tutorial.Packet.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Packet_DataField > fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class Packet_DataField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Packet.DataField) */ {
 public:
  inline Packet_DataField() : Packet_DataField(nullptr) {};
  virtual ~Packet_DataField();

  Packet_DataField(const Packet_DataField& from);
  Packet_DataField(Packet_DataField&& from) noexcept
    : Packet_DataField() {
    *this = ::std::move(from);
  }

  inline Packet_DataField& operator=(const Packet_DataField& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet_DataField& operator=(Packet_DataField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet_DataField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet_DataField* internal_default_instance() {
    return reinterpret_cast<const Packet_DataField*>(
               &_Packet_DataField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Packet_DataField& a, Packet_DataField& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet_DataField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet_DataField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet_DataField* New() const final {
    return CreateMaybeMessage<Packet_DataField>(nullptr);
  }

  Packet_DataField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet_DataField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet_DataField& from);
  void MergeFrom(const Packet_DataField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet_DataField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Packet.DataField";
  }
  protected:
  explicit Packet_DataField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_label(
      std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.Packet.DataField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class Packet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {};
  virtual ~Packet();

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Packet_Data Data;
  typedef Packet_DataField DataField;

  typedef Packet_OriginalProtocol OriginalProtocol;
  static constexpr OriginalProtocol CAN =
    Packet_OriginalProtocol_CAN;
  static constexpr OriginalProtocol Modbus =
    Packet_OriginalProtocol_Modbus;
  static inline bool OriginalProtocol_IsValid(int value) {
    return Packet_OriginalProtocol_IsValid(value);
  }
  static constexpr OriginalProtocol OriginalProtocol_MIN =
    Packet_OriginalProtocol_OriginalProtocol_MIN;
  static constexpr OriginalProtocol OriginalProtocol_MAX =
    Packet_OriginalProtocol_OriginalProtocol_MAX;
  static constexpr int OriginalProtocol_ARRAYSIZE =
    Packet_OriginalProtocol_OriginalProtocol_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OriginalProtocol_descriptor() {
    return Packet_OriginalProtocol_descriptor();
  }
  template<typename T>
  static inline const std::string& OriginalProtocol_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OriginalProtocol>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OriginalProtocol_Name.");
    return Packet_OriginalProtocol_Name(enum_t_value);
  }
  static inline bool OriginalProtocol_Parse(const std::string& name,
      OriginalProtocol* value) {
    return Packet_OriginalProtocol_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalMessageFieldNumber = 5,
    kTimeDataReadFieldNumber = 2,
    kDataFieldNumber = 3,
    kBoardIdFieldNumber = 1,
    kProtocolFieldNumber = 4,
    kDigitalSignatureFieldNumber = 6,
  };
  // bytes original_message = 5;
  void clear_original_message();
  const std::string& original_message() const;
  void set_original_message(const std::string& value);
  void set_original_message(std::string&& value);
  void set_original_message(const char* value);
  void set_original_message(const void* value, size_t size);
  std::string* mutable_original_message();
  std::string* release_original_message();
  void set_allocated_original_message(std::string* original_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_original_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_original_message(
      std::string* original_message);
  private:
  const std::string& _internal_original_message() const;
  void _internal_set_original_message(const std::string& value);
  std::string* _internal_mutable_original_message();
  public:

  // .google.protobuf.Timestamp time_data_read = 2;
  bool has_time_data_read() const;
  private:
  bool _internal_has_time_data_read() const;
  public:
  void clear_time_data_read();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time_data_read() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time_data_read();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_data_read();
  void set_allocated_time_data_read(PROTOBUF_NAMESPACE_ID::Timestamp* time_data_read);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_data_read() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_data_read();
  public:
  void unsafe_arena_set_allocated_time_data_read(
      PROTOBUF_NAMESPACE_ID::Timestamp* time_data_read);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_data_read();

  // .tutorial.Packet.Data data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::tutorial::Packet_Data& data() const;
  ::tutorial::Packet_Data* release_data();
  ::tutorial::Packet_Data* mutable_data();
  void set_allocated_data(::tutorial::Packet_Data* data);
  private:
  const ::tutorial::Packet_Data& _internal_data() const;
  ::tutorial::Packet_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::tutorial::Packet_Data* data);
  ::tutorial::Packet_Data* unsafe_arena_release_data();

  // int32 board_id = 1;
  void clear_board_id();
  ::PROTOBUF_NAMESPACE_ID::int32 board_id() const;
  void set_board_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_board_id() const;
  void _internal_set_board_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .tutorial.Packet.OriginalProtocol protocol = 4;
  void clear_protocol();
  ::tutorial::Packet_OriginalProtocol protocol() const;
  void set_protocol(::tutorial::Packet_OriginalProtocol value);
  private:
  ::tutorial::Packet_OriginalProtocol _internal_protocol() const;
  void _internal_set_protocol(::tutorial::Packet_OriginalProtocol value);
  public:

  // int64 digital_signature = 6;
  void clear_digital_signature();
  ::PROTOBUF_NAMESPACE_ID::int64 digital_signature() const;
  void set_digital_signature(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_digital_signature() const;
  void _internal_set_digital_signature(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.Packet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_message_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_data_read_;
  ::tutorial::Packet_Data* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 board_id_;
  int protocol_;
  ::PROTOBUF_NAMESPACE_ID::int64 digital_signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet_Data

// string type = 1;
inline void Packet_Data::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Packet_Data::type() const {
  // @@protoc_insertion_point(field_get:tutorial.Packet.Data.type)
  return _internal_type();
}
inline void Packet_Data::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tutorial.Packet.Data.type)
}
inline std::string* Packet_Data::mutable_type() {
  // @@protoc_insertion_point(field_mutable:tutorial.Packet.Data.type)
  return _internal_mutable_type();
}
inline const std::string& Packet_Data::_internal_type() const {
  return type_.Get();
}
inline void Packet_Data::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Packet_Data::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Packet.Data.type)
}
inline void Packet_Data::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tutorial.Packet.Data.type)
}
inline void Packet_Data::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tutorial.Packet.Data.type)
}
inline std::string* Packet_Data::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Packet_Data::release_type() {
  // @@protoc_insertion_point(field_release:tutorial.Packet.Data.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Packet_Data::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tutorial.Packet.Data.type)
}
inline std::string* Packet_Data::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tutorial.Packet.Data.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Packet_Data::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.Packet.Data.type)
}

// repeated .tutorial.Packet.DataField fields = 2;
inline int Packet_Data::_internal_fields_size() const {
  return fields_.size();
}
inline int Packet_Data::fields_size() const {
  return _internal_fields_size();
}
inline void Packet_Data::clear_fields() {
  fields_.Clear();
}
inline ::tutorial::Packet_DataField* Packet_Data::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.Packet.Data.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Packet_DataField >*
Packet_Data::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Packet.Data.fields)
  return &fields_;
}
inline const ::tutorial::Packet_DataField& Packet_Data::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::tutorial::Packet_DataField& Packet_Data::fields(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Packet.Data.fields)
  return _internal_fields(index);
}
inline ::tutorial::Packet_DataField* Packet_Data::_internal_add_fields() {
  return fields_.Add();
}
inline ::tutorial::Packet_DataField* Packet_Data::add_fields() {
  // @@protoc_insertion_point(field_add:tutorial.Packet.Data.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Packet_DataField >&
Packet_Data::fields() const {
  // @@protoc_insertion_point(field_list:tutorial.Packet.Data.fields)
  return fields_;
}

// -------------------------------------------------------------------

// Packet_DataField

// string label = 1;
inline void Packet_DataField::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Packet_DataField::label() const {
  // @@protoc_insertion_point(field_get:tutorial.Packet.DataField.label)
  return _internal_label();
}
inline void Packet_DataField::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:tutorial.Packet.DataField.label)
}
inline std::string* Packet_DataField::mutable_label() {
  // @@protoc_insertion_point(field_mutable:tutorial.Packet.DataField.label)
  return _internal_mutable_label();
}
inline const std::string& Packet_DataField::_internal_label() const {
  return label_.Get();
}
inline void Packet_DataField::_internal_set_label(const std::string& value) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Packet_DataField::set_label(std::string&& value) {
  
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Packet.DataField.label)
}
inline void Packet_DataField::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tutorial.Packet.DataField.label)
}
inline void Packet_DataField::set_label(const char* value,
    size_t size) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tutorial.Packet.DataField.label)
}
inline std::string* Packet_DataField::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Packet_DataField::release_label() {
  // @@protoc_insertion_point(field_release:tutorial.Packet.DataField.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Packet_DataField::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tutorial.Packet.DataField.label)
}
inline std::string* Packet_DataField::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tutorial.Packet.DataField.label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return label_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Packet_DataField::unsafe_arena_set_allocated_label(
    std::string* label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (label != nullptr) {
    
  } else {
    
  }
  label_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      label, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.Packet.DataField.label)
}

// double value = 2;
inline void Packet_DataField::clear_value() {
  value_ = 0;
}
inline double Packet_DataField::_internal_value() const {
  return value_;
}
inline double Packet_DataField::value() const {
  // @@protoc_insertion_point(field_get:tutorial.Packet.DataField.value)
  return _internal_value();
}
inline void Packet_DataField::_internal_set_value(double value) {
  
  value_ = value;
}
inline void Packet_DataField::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:tutorial.Packet.DataField.value)
}

// -------------------------------------------------------------------

// Packet

// int32 board_id = 1;
inline void Packet::clear_board_id() {
  board_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packet::_internal_board_id() const {
  return board_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Packet::board_id() const {
  // @@protoc_insertion_point(field_get:tutorial.Packet.board_id)
  return _internal_board_id();
}
inline void Packet::_internal_set_board_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  board_id_ = value;
}
inline void Packet::set_board_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_board_id(value);
  // @@protoc_insertion_point(field_set:tutorial.Packet.board_id)
}

// .google.protobuf.Timestamp time_data_read = 2;
inline bool Packet::_internal_has_time_data_read() const {
  return this != internal_default_instance() && time_data_read_ != nullptr;
}
inline bool Packet::has_time_data_read() const {
  return _internal_has_time_data_read();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Packet::_internal_time_data_read() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_data_read_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Packet::time_data_read() const {
  // @@protoc_insertion_point(field_get:tutorial.Packet.time_data_read)
  return _internal_time_data_read();
}
inline void Packet::unsafe_arena_set_allocated_time_data_read(
    PROTOBUF_NAMESPACE_ID::Timestamp* time_data_read) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_data_read_);
  }
  time_data_read_ = time_data_read;
  if (time_data_read) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.Packet.time_data_read)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Packet::release_time_data_read() {
  auto temp = unsafe_arena_release_time_data_read();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Packet::unsafe_arena_release_time_data_read() {
  // @@protoc_insertion_point(field_release:tutorial.Packet.time_data_read)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_data_read_;
  time_data_read_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Packet::_internal_mutable_time_data_read() {
  
  if (time_data_read_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_data_read_ = p;
  }
  return time_data_read_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Packet::mutable_time_data_read() {
  // @@protoc_insertion_point(field_mutable:tutorial.Packet.time_data_read)
  return _internal_mutable_time_data_read();
}
inline void Packet::set_allocated_time_data_read(PROTOBUF_NAMESPACE_ID::Timestamp* time_data_read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_data_read_);
  }
  if (time_data_read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_data_read)->GetArena();
    if (message_arena != submessage_arena) {
      time_data_read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_data_read, submessage_arena);
    }
    
  } else {
    
  }
  time_data_read_ = time_data_read;
  // @@protoc_insertion_point(field_set_allocated:tutorial.Packet.time_data_read)
}

// .tutorial.Packet.Data data = 3;
inline bool Packet::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Packet::has_data() const {
  return _internal_has_data();
}
inline void Packet::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::tutorial::Packet_Data& Packet::_internal_data() const {
  const ::tutorial::Packet_Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tutorial::Packet_Data*>(
      &::tutorial::_Packet_Data_default_instance_);
}
inline const ::tutorial::Packet_Data& Packet::data() const {
  // @@protoc_insertion_point(field_get:tutorial.Packet.data)
  return _internal_data();
}
inline void Packet::unsafe_arena_set_allocated_data(
    ::tutorial::Packet_Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.Packet.data)
}
inline ::tutorial::Packet_Data* Packet::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tutorial::Packet_Data* Packet::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:tutorial.Packet.data)
  
  ::tutorial::Packet_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::tutorial::Packet_Data* Packet::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::Packet_Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::tutorial::Packet_Data* Packet::mutable_data() {
  // @@protoc_insertion_point(field_mutable:tutorial.Packet.data)
  return _internal_mutable_data();
}
inline void Packet::set_allocated_data(::tutorial::Packet_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:tutorial.Packet.data)
}

// .tutorial.Packet.OriginalProtocol protocol = 4;
inline void Packet::clear_protocol() {
  protocol_ = 0;
}
inline ::tutorial::Packet_OriginalProtocol Packet::_internal_protocol() const {
  return static_cast< ::tutorial::Packet_OriginalProtocol >(protocol_);
}
inline ::tutorial::Packet_OriginalProtocol Packet::protocol() const {
  // @@protoc_insertion_point(field_get:tutorial.Packet.protocol)
  return _internal_protocol();
}
inline void Packet::_internal_set_protocol(::tutorial::Packet_OriginalProtocol value) {
  
  protocol_ = value;
}
inline void Packet::set_protocol(::tutorial::Packet_OriginalProtocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:tutorial.Packet.protocol)
}

// bytes original_message = 5;
inline void Packet::clear_original_message() {
  original_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Packet::original_message() const {
  // @@protoc_insertion_point(field_get:tutorial.Packet.original_message)
  return _internal_original_message();
}
inline void Packet::set_original_message(const std::string& value) {
  _internal_set_original_message(value);
  // @@protoc_insertion_point(field_set:tutorial.Packet.original_message)
}
inline std::string* Packet::mutable_original_message() {
  // @@protoc_insertion_point(field_mutable:tutorial.Packet.original_message)
  return _internal_mutable_original_message();
}
inline const std::string& Packet::_internal_original_message() const {
  return original_message_.Get();
}
inline void Packet::_internal_set_original_message(const std::string& value) {
  
  original_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Packet::set_original_message(std::string&& value) {
  
  original_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Packet.original_message)
}
inline void Packet::set_original_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  original_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tutorial.Packet.original_message)
}
inline void Packet::set_original_message(const void* value,
    size_t size) {
  
  original_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tutorial.Packet.original_message)
}
inline std::string* Packet::_internal_mutable_original_message() {
  
  return original_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Packet::release_original_message() {
  // @@protoc_insertion_point(field_release:tutorial.Packet.original_message)
  return original_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Packet::set_allocated_original_message(std::string* original_message) {
  if (original_message != nullptr) {
    
  } else {
    
  }
  original_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tutorial.Packet.original_message)
}
inline std::string* Packet::unsafe_arena_release_original_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tutorial.Packet.original_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return original_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Packet::unsafe_arena_set_allocated_original_message(
    std::string* original_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (original_message != nullptr) {
    
  } else {
    
  }
  original_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      original_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.Packet.original_message)
}

// int64 digital_signature = 6;
inline void Packet::clear_digital_signature() {
  digital_signature_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Packet::_internal_digital_signature() const {
  return digital_signature_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Packet::digital_signature() const {
  // @@protoc_insertion_point(field_get:tutorial.Packet.digital_signature)
  return _internal_digital_signature();
}
inline void Packet::_internal_set_digital_signature(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  digital_signature_ = value;
}
inline void Packet::set_digital_signature(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_digital_signature(value);
  // @@protoc_insertion_point(field_set:tutorial.Packet.digital_signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tutorial::Packet_OriginalProtocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tutorial::Packet_OriginalProtocol>() {
  return ::tutorial::Packet_OriginalProtocol_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
